using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libspatialindex_c"], :libspatialindex_c),
    LibraryProduct(prefix, ["libspatialindex"], :libspatialindex),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaGeo/LibSpatialIndexBuilder/releases/download/v1.8.5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/SpatialIndex.v1.8.5.aarch64-linux-gnu.tar.gz", "44aca40497b91f9dcd4fc56ca5fcfcf0accdac0b68260108a06ea885a1ef4135"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/SpatialIndex.v1.8.5.aarch64-linux-musl.tar.gz", "888921ea73f4971350969abe113000f72ef5bc602ade90964885fceb66ea88f6"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/SpatialIndex.v1.8.5.arm-linux-gnueabihf.tar.gz", "8ccf026b3248de6593afb3962af22c1ba9059e4124540a4fbcefc18480bba8cf"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/SpatialIndex.v1.8.5.arm-linux-musleabihf.tar.gz", "1dc699fe0e77c4d8cc531fcf17eaa919727e24ced25633bc55ea57e4c025f38d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SpatialIndex.v1.8.5.i686-linux-gnu.tar.gz", "faa3730c0e750b676e0cf0c453da8ca9e5c91f1af2ce981b2f3329986a4a2286"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/SpatialIndex.v1.8.5.i686-linux-musl.tar.gz", "a0ae4a8105b4204267f2de53e3edb615e80bf7bd564b75f08a4edc5f7fe72311"),
    Windows(:i686) => ("$bin_prefix/SpatialIndex.v1.8.5.i686-w64-mingw32.tar.gz", "a713edc2f1a6820f610d98261be969b54eb7dd438c664764b1887c2f53924765"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/SpatialIndex.v1.8.5.powerpc64le-linux-gnu.tar.gz", "b42cc81e948e1f50364bacb5dcbcdd17b482611e4c1d84757c9ec010f46d138f"),
    MacOS(:x86_64) => ("$bin_prefix/SpatialIndex.v1.8.5.x86_64-apple-darwin14.tar.gz", "09eb5ae4f7beccaebfbfd29e9fbd954c543db8b4eebdd5f9e4958d0cc6c43fa3"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SpatialIndex.v1.8.5.x86_64-linux-gnu.tar.gz", "10c5ac4461a278cdf99a3c8ca9488b847710663cb63f903acd8217754ead190d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/SpatialIndex.v1.8.5.x86_64-linux-musl.tar.gz", "38cb5077deb173b409932319e56145b67b9664364dace4c0ade30b2c4bae4306"),
    FreeBSD(:x86_64) => ("$bin_prefix/SpatialIndex.v1.8.5.x86_64-unknown-freebsd11.1.tar.gz", "d8752186afaa567fffdcef586261bcc3b85b2bd51e336ce0ce1d3b42edf63dfc"),
    Windows(:x86_64) => ("$bin_prefix/SpatialIndex.v1.8.5.x86_64-w64-mingw32.tar.gz", "754a14eed71e5f2db34737f331268f518cb2ef7cf26a44c45b30530dfd185aa3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
